#+TITLE: ENGM 401 Notes
#+AUTHOR: Arun Woosaree
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+LaTeX_HEADER: \usepackage{graphicx}

* Formulae
#+name: imports
#+begin_src python :tangle util.py
import numpy as np
import numpy_financial as npf
import sympy as sym
import pandas as pd
import matplotlib.pyplot as plt
import math


class FormulaError(Exception):
    """Exception raised for errors in my formulae

    Attributes:
        factor_notation: str
        message -- explanation of the error
    """

    def __init__(self, factor_notation: str, message: str):
        self.factor_notation = factor_notation
        self.message = message

    def __str__(self):
        return f"{self.factor_notation} -> {self.message}"


def simple_interest(P=None, i=None, N=None):
    fn = "simple interest"
    if P is None:
        raise FormulaError(fn, "P, or principle amount not provided")
    elif i is None or i <=0 or 1 <= i:
        raise FormulaError(fn, "i, or interest not provided: 0<i<1")
    elif N is None:
        raise FormulaError(fn, "N, or number of number of interest periods is missing")

    return P * (1 + i*N)

def single_future(P=None, i=None, N=None):
    fn = "single cash flow (F/P, i, N)"
    if P is None:
        raise FormulaError(fn, "P, or principle amount not provided")
    elif i is None:
        raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
    elif N is None:
        raise FormulaError(fn, "N, or number of number of interest periods is missing")

    return P * (1 + i)**N

def single_present(F=None, i=None, N=None):
    fn = "single cash flow (P/F, i, N)"
    if F is None:
        raise FormulaError(fn, "F, or future amount not provided")
    elif i is None:
        raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
    elif N is None:
        raise FormulaError(fn, "N, or number of number of interest periods is missing")

    return F/(1 + i)**N

def single_rate(F=None, P=None, N=None):
    fn = "find the discounting rate that makes a present amount equivalent to a future amount"
    if F is None:
        raise FormulaError(fn, "F, or future amount not provided")
    if P is None:
        raise FormulaError(fn, "P, or present amount not provided")
    elif N is None:
        raise FormulaError(fn, "N, or number of number of interest periods is missing")

    return npf.rate(N, 0, -P, F)


def single_periods(F=None, P=None, i=None):
    fn = "find the number of periods makes a present amount equivalent to a future amount"
    if F is None:
        raise FormulaError(fn, "F, or future amount not provided")
    if P is None:
        raise FormulaError(fn, "P, or present amount not provided")
    elif i is None:
        raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")

    return npf.nper(i, 0, -P, F)

def eq_future(A=None, i=None, N=None):
    fn = "equal payment series (F/A, i, N)"
    if A is None:
        raise FormulaError(fn, "A, or future amount not provided")
    elif i is None:
        raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
    elif N is None:
        raise FormulaError(fn, "N, or number of number of interest periods is missing")

    return A * ((1+i)**N -1) / i

def eq_sinking(F=None, i=None, N=None):
    fn = "equal payment series (A/F, i N): gives future value"
    if F is None:
        raise FormulaError(fn, "F, or future amount not provided")
    elif i is None:
        raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
    elif N is None:
        raise FormulaError(fn, "N, or number of number of interest periods is missing")

    return F * i/ ((1+i)**N - 1)

def eq_present(A=None, i=None, N=None):
    fn = "equal payment (P/A, i, N)"
    if A is None:
        raise FormulaError(fn, "A, or future amount not provided")
    elif i is None:
        raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
    elif N is None:
        raise FormulaError(fn, "N, or number of number of interest periods is missing")

    return A * ((1+i)**N - 1) / (i * (1+i)**N)

def eq_capital_recovery(P=None, i=None, N=None):
    fn = "equal payment (A/P, i, N): gives A"
    if P is None:
        raise FormulaError(fn, "P, or principle amount not provided")
    elif i is None:
        raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
    elif N is None:
        raise FormulaError(fn, "N, or number of number of interest periods is missing")

    return P * (i * (1 + i)**N) / ((1 + i)**N - 1)


def linear_present(G=None, i=None, N=None):
   fn = "gradient series (P/G, i, N)"
   if G is None:
       raise FormulaError(fn, "G, or the first payment at period 2 is missing")
   elif i is None:
       raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
   elif N is None:
       raise FormulaError(fn, "N, or number of number of interest periods is missing")

   return G * ( (1+i)**N - i*N - 1 ) / (i**2 * (1 + i)**N)


def linear_conversion(G=None, i=None, N=None):
   fn = "gradient series (A/G, i, N): gives A"
   if G is None:
       raise FormulaError(fn, "G, or the first payment at period 2 is missing")
   elif i is None:
       raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
   elif N is None:
       raise FormulaError(fn, "N, or number of number of interest periods is missing")

   return G * ( (1+i)**N - i*N - 1) / (i * ((1+i)**N - 1))


def geo_present(A1=None, g=None, i=None, N=None):
   fn = "geometric gradient series (P/A_1, g, i, N)"
   if A1 is None:
       raise FormulaError(fn, "A1, or the first payment at period 1 is missing")
   elif g is None:
       raise FormulaError(fn, "g, or the growth rate is missing")
   elif i is None:
       raise FormulaError(fn, "i, or interest not provided: 0<=i<=1")
   elif N is None:
       raise FormulaError(fn, "N, or number of number of interest periods is missing")

   if i == g:
       return A1 * N / (1+i)

   return A1 * (1 - (1+g)**N * (1+i)**(-N)) / (i-g)


def effective_rate_per_interest_period(r=None, M=None, K=None, C=None):
    fn = """effective_rate_per_interest_period: i_a
    r = APR or nominal interest rate per year
    M = number of compounding periods per year, M=CK
    C = number of compounding periods per payment period
    K = number of payment periods per year
    """

    if r is None:
        raise FormulaError(fn, "r, or APR, or nominal interest rate per year is missing")

    if M == math.inf and K is not None:
        return math.exp(r/K) -1

    if M == math.inf and K is None:
        return math.exp(r/K) -1

    if C is not None and K is not None and M is None:
        return (1+ r/(C*K))**C - 1

    if K is None and C is None and M is not None:
        return (1 + r/M)**M - 1

    if C is not None and K is None and M is not None:
        return (1+r/M)**C - 1

    if M is not None and K is not None and C is None and M is not None:
        return (1+ r/M)**(M/K) -1

    raise FormulaError(fn, "invalid combo of inputs")

# amortized
def remaining_balance():
    pass

def interest_payment():
    pass

def principal_repayment():
    pass

#+end_src

* Assignment 2 TODO: move this

** 1 [good]
- quarterly deposit
- M=4
- N=3
- 12% compounded monthly

  #+begin_src python :noweb no-export :results output
<<imports>>
ia= effective_rate_per_interest_period(M=12, r=0.12, K=4)
print(ia)
  #+end_src

  #+RESULTS:
  : 0.030301000000000133
 effective rate quarterly

 times 3 years : 4 * 3 = 12

 = 12 (F/A, ia, N)
** 2 [good]
What equal series of payments must be paid into a sinking fund to accumulate the following amount?
a) $21000 in 11 years at 6.45% compounded semiannually when payments are semiannual.
b) $9000 in 10 years at 9.35% compounded quarterly when payments are quarterly.
c) $24000 in 3 years at 6.55% compounded monthly when payments are monthly.

   #+begin_src python :noweb no-export :results output
<<imports>>
print('a')
ia = effective_rate_per_interest_period(M=2, K=2, r=0.0645)
print(ia)
N = 11 * 2
A = eq_sinking(F=21000, i=ia, N=N)
print(A)

print('b')
ia = effective_rate_per_interest_period(M=4, K=4, r=0.0935)
N = 10 * 4
A = eq_sinking(F=9000, i=ia, N=N)
print(A)

print('c')
ia = effective_rate_per_interest_period(M=12, K=12, r=0.0655)
N = 3 * 12
A = eq_sinking(F=24000, i=ia, N=N)
print(A)
   #+end_src

   #+RESULTS:
   : a
   : 0.03224999999999989
   : 670.3247375234232
   : b
   : 138.40904609443572
   : c
   : 605.1223842502495

*** 3 [good]
   #+begin_src python :noweb no-export :results output
<<imports>>
a =0.06
b=0.1
c=0.08
d=2000
e=3000

print('a')
i1 = effective_rate_per_interest_period(M=4, K=1, r=a)
print("i1", i1)
N = 2
P1 = eq_present(A=d, i=i1, N=2)
print("P1", P1)

i2 = effective_rate_per_interest_period(M=4, K=1, r=b)
print("i2", i2)
P2 = eq_present(A=d, i=i2, N=N) + single_present(F=(e-d), i=i2, N=1)
print("p2 at t=2", P2)
P2 = eq_present(A=d, i=i2, N=N) + single_present(F=(e-d), i=i2, N=1)
print("p2 at t=2", P2)
# time shift
P2 = single_present(F=P2, i=i1, N=2)
print("P2", P2) #TODO 3869

i3 = effective_rate_per_interest_period(M=4, K=1, r=c)
print("i3", i3)
P3 = single_present(F=d, i=i3, N=1)
print("p3 at year 4", P3)
# time shift
P3 = single_present(F=P3, i=i2, N=2)
# again
P3 = single_present(F=P3, i=i1, N=2)
print("P3", P3) #1346.20


P=P1 + P2 + P3
print("a: P=$", P) #8875

print('b')
f = single_future(P=P, i=i1, N=2)
f = single_future(P=f, i=i2, N=2)
f = single_future(P=f, i=i3, N=1)
print(f)

print('c')
fuck = lambda i, n: single_present(F=1, i=i, N=n)

const = fuck(i1, 1) + fuck(i1, 2) +\
        fuck(i2, 1) * fuck(i1, 2) + fuck(i2, 2) * fuck(i1, 2) +\
        fuck(i3, 1) * fuck(i2, 2) * fuck(i1, 2 )
# 2199
print(const) # 4.035
print(P/const)
   #+end_src

   #+RESULTS:
   #+begin_example
   a
   i1 0.06136355062499965
   P1 3659.7907081754215
   i2 0.10381289062499954
   p2 at t=2 4359.345076025451
   p2 at t=2 4359.345076025451
   P2 3869.8391164748527
   i3 0.08243215999999998
   p3 at year 4 1847.6908520530285
   P3 1346.201429810246
   a: P=$ 8875.83125446052
   b
   13186.483178392722
   c
   4.03580439472855
   2199.2719136868654
   #+end_example

*** 4 [fix a and b]
#+begin_src python :noweb no-export :results output
<<imports>>
M=12
K=12
r=0.01
A=156.04
N = 24
P = 3000

rate = npf.rate(N, A, -P, 0)
eff_annual_rate = rate  * 12
print("effective annual rate", eff_annual_rate) # wrong
print("rate", rate) #wrong

# part c good
f = eq_present(A=A, i=rate, N=12)
print(f)

#+end_src

#+RESULTS:
: effective annual rate 0.22273535385356585
: rate 0.018561279487797153
: 1664.8515346491358

*** 5 [fix c]
A = PPn + In
In is the interest payment in period n
PPn is the principal payment
In is the interest payment in period n

n = 30
PPn = ?
A = 186

#+begin_src python :noweb no-export :results output
<<imports>>
P=15000
i = effective_rate_per_interest_period(r=0.09, M=12, K=12)
# after 6 months
F = single_future(P=P, i=i, N=6)
print("after 6 months", F)
A = eq_capital_recovery(P=F, i=i, N=36)
print("original A", A) #good

print('b') # good
p = eq_present(A=A, i=i, N=10)
print(p)

print('c') # wrong
# monthly instalments = P(1+iN)/ (12N) => 30 = P(1+i30)/(12*30)
N=30/12
print((186 * 12 * N / p - 1)/N)
#+end_src

#+RESULTS:
: after 6 months 15687.78352655248
: original A 498.8673221713908
: b
: 4788.91655757971
: c
: 0.06607619346953912
: PPn

*** 6
#+begin_src python :noweb no-export :results output
<<imports>>

# semianually paid
#initial_purchase = 996.25
coupon = 14/100
maturity= 15
par = 900
M=2
N = maturity * M # because 15 to mature and semi annual
A = coupon/M * par


#i = sym.Symbol('i')
#exp = eq_present(i=i, A=A, N=N) + single_present(i=i, N=N, F=par) - initial_purchase
#print(exp)
#_, i = sym.solveset(exp, i, domain=sym.S.Reals)

#ia = (1+i)**M -1
#print("ia", ia)


#current_yield = A/initial_purchase
#print('current yield', current_yield)

market_value = eq_present(i=0.05, N=((15-2)*2), A=A)
print(market_value) # wrong


market_value = eq_present(i=0.16, N=((15-2)*2), A=A)
print(market_value) #wrong

print(A/783.58* 100) # somehow right
#+end_src

#+RESULTS:
: 905.6366739626859
: 385.44551228643377
: 8.040021440057174


* Introduction <2021-01-11 Mon>
Chapter based study questions: use right side of brain
i.e. use common sense not exact numerical answers
answer using experience and your understanding of the concept
Some business problems have no clear answer unlike other engineering courses.
**  Chapter 1
- <<<capital expenditures>>> :: spending on behalf of the company
- selling :: know technical features and economic benefits (marketing)
- <<<operations management>>> :: know enough for day-to-day management of the business
- <<<project management>>> :: proposals and justification

*** types of businesses
- Proprietorship: a business owned by one individual (small to medium size)
- Partnership: a business with more than one owner (small to medium size)
- Corporation: a legal entity created under provincial or federal law, entity is separate from its owners and managers (medium to large size, typically large)

the engineer must estimate or forecast
1. The required investment in a project
2. The product demand
3. A selling price
4. A manufacturing cost
5. A product life

6. <<<Principle 1>>> :: A nearby penny is worth a distant dollar
   (time value of money)
7. <<<Principle 2>>> :: All that counts are the differences among alternatives
   - choices
8. <<<Principle 3>>> :: Marginal revenue must exceed marginal cost
   - \(\delta R > \delta C\)
9. <<<Principle 4>>> ::  Additional risk is not taken without the expected additional return

summary: we did the course overview
and basic principles of engineering economics

* Chapter 3 <2021-01-13 Wed>
** Story: Take a lump sum of $17 Million, or $1 Million Instalments for 25 years?

"A nearby penny is worth a distant dollar" time value of money
we need to compare the value of money received at different points in time

we use interest formulas to
*place different cash flows received at different times in the same time frame*
to compare them
** Definitions
+ Market Interest Rate ::
    the interest rate quoted by financial institutions that refers to the cost of money to borrows, or the earnings from money to lenders
+ <<<Time Value of money>>> ::
  - a dollar today is worth more than a dollar in the future because the dollar today can earn interest
  - money has both *earning power* and *purchasing power*
    + earning power :: it can earn more money over time
    + purchasing power :: loss of value because of inflation over time

    (e.g. loss of value because of inflation)
+ <<<Principal>>> ::
    the initial amount of money involving debt or investments
+ Interest rate ::
    the cost or price of the money expressed as a percentage rate per period of time
+ <<<Interest period>>> ::
    a length of time that determines how frequently interest is calculated
+ Number of interest periods ::
    specified length of time of the transaction, denoted as *N*
+ <<<Plan for receipts or Payments>>> ::
    yields a particular cash flow pattern over a specified length of time
+ <<<Future amount of money>>> ::
    how much is paid over time, principal + interest
+ A_n :: a discrete payment or receipt occurring at the end of some interest period
+ i :: interest rate per period
+ N :: number of cash flows
+ P :: Principal amount, or the
    sum of money at time=0 (present value/worth)
+ F :: Future value/future sum of money at the end of analysis
+ A :: end of period payment (uniform series) that continues for N periods.
    This is a special case where \(A_1=A_2=...=A_N\)
+ V_n :: equivalent sum of money at the end of a period n that considers the time value of money
  + \(V_0 = P\)
  + \(V_N = F\)
+ Cash flow diagram ::
  + Upward is positive cash flow
    #+begin_src sh :cache yes :exports none :results silent
    pdftoppm 'notes/lecture/markup/2021a L2 Time Value of Money SimpleCompoundInterest (with notes).pdf' converted_images/cash_flow_diagram -jpeg -f 15 -singlefile
    #+end_src


    #+attr_org: :width 256
    [[./converted_images/cash_flow_diagram.jpg]]

+ <<<End of period Convention>>> ::
    We place all cash flow transactions at the end of an interest period
+ <<<Simple Interest>>> :: charging an interest rate only on the principal
  \(F = P + I = P(1 + iN)\)
+ <<<Compound interest>>> :: charging interest on the initial sum and any previously accumulated unpaid interest
  \(F=P(1 + i)^N\)

** Economic Equivalence
exists between individual cash flows and/or patterns of cash flows that have the *same economic effect* and could therefore
be traded for one another. Even though the amounts and timing of the cash flows might differ, the appropriaate interest rate
may make them equivalent
- One payment over time, what is the equivalent amount in the future?
- principle 1
  - equivalence calculations to compare alternatives need the same timeline
- principle 2 equivalence depends on interest rates
- principle 3 equivalence calculations may require the conversion of multiple payment cash flows to a single cash flow
- principle 4 equivalence is maintained regardless of point of view, either from the leadder or from the borrower

** Examples
*** [[pdf:./notes/lecture/markup/2021a L2 Time Value of Money SimpleCompoundInterest (with notes).pdf::13][Interest Transaction]]
- Plan 1
  + Principal: $20 000
  + Loan origination fee: $200
  + Interest rate: 9%
  + Interest period: 1 year
  + Number of interest periods: 5
  + Fee payment now plus equal annual payments
- Plan 2
  + Principal: $20 000
  + Loan origination fee: $200
  + Interest rate: 9%
  + Interest period: 1 year
  + Number of interest periods: 5
  + Fee payment now plus a single payment in year 5

| End of Year | Receipts |   Plan 1 |    Plan 2 |
|-------------+----------+----------+-----------|
|           0 |    20000 |      200 |       200 |
|           1 |          |  5141.85 |         0 |
|           2 |          |  5141.85 |         0 |
|           3 |          |  5141.85 |         0 |
|           4 |          |  5141.85 |         0 |
|           5 |          |  5141.85 | 30772.479 |
|       total |          | 25909.25 | 30972.479 |
#+TBLFM: $4=20000*1.09^5

- plan 1 is time value of money
#+begin_src python :noweb no-export :exports both
<<imports>>
# should be 5141.85
return eq_capital_recovery(P=20000, i=0.09, N=5)
#+end_src

#+RESULTS:
: 5141.849139134897

- plan 2 is compound interest

#+begin_src python :noweb no-export
<<imports>>
return single_future(P=20000, i=0.09, N=5) # about 30772.47
#+end_src

  #+RESULTS:
  : 30772.47909800001
***  [[pdf:./notes/lecture/markup/2021a L3 Economic Equivalence Single Cashflow (with notes).pdf::5][Equivalence Example 3.3]]
- 8% interest (yearly)
- what is the equivalent worth of $3000 in 5 years?
  #+begin_src python :noweb no-export :exports both
  <<imports>>
  # about 2041.79
  return single_present(F=3000, i=0.08, N=5)
  #+end_src

  #+RESULTS:
  : 2041.7495911012588

***  [[pdf:./notes/lecture/markup/2021a L3 Economic Equivalence Single Cashflow (with notes).pdf::11][Equivalence Calculations with Multiple Payments 3.6]]
2 options to pay off a 3 year $1000 load with 10% interest:
| options                                                                        | year 1 | year 2 | year 3 |
|--------------------------------------------------------------------------------+--------+--------+--------|
| plan 1: end of year payment of interest and principal repayment at end of loan |    100 |    100 |   1100 |
| plan 2: one end of load payment of both principal and interest                 |      0 |      0 |   1131 |
|                                                                                |        |        |        |

notice how you pay $31 more by opting to pay the interest later

- option 1
  use the compound interest formula and apply it to each $100 disbursement
  #+begin_src python :noweb no-export :exports both
  <<imports>>
  return sum([single_future(P=100, i=0.1,  N=n) for n in range(3)])
  #+end_src

  #+RESULTS:
  : 331.0

- option 2
  a single disbursement of $331

***  [[pdf:./notes/lecture/markup/2021a L3 Economic Equivalence Single Cashflow (with notes).pdf::14][Extra Example]]
you signed a load agreement with the following terms
- borrowed amount: $2124.34
- monthly interest rate: 1%
- payment = $100 per month for 24 months
- how to interpret using equivalence?
- discounting to first payment

  \(P = \sum_{n=1}^{24} P_n\)

  \[
  P_{total} = \sum_{n=1}^{24} \frac{A_n}{(1+i)^n}
  \]

  this is a bit tedious to calculate, will introduce formulas
  
*** Interest tables
they suck
- what is the present worth of $109 472 to be received 15 periods from today at a discounting rate of 12%

  #+begin_src python :noweb no-export :exports both :results output
<<imports>>
p = single_present(F=109472, i=0.12, N=15)
print("present value", p) # 20k
# https://numpy.org/doc/stable/reference/generated/numpy.rate.html#numpy.rate
r = single_rate(F=109472, P=20000, N=15)
print("rate to make 20000 worth 109472", r) #12%
n = single_periods(F=109472, P=20000, i=0.12)
print("num periods", n) # 15
  #+end_src

  #+RESULTS:
  : present value 20000.125113114413
  : rate to make 20000 worth 109472 0.1200004670875983
  : num periods 15.000055199053419


*** [[pdf:./notes/lecture/markup/2021a L3 Economic Equivalence Single Cashflow (with notes).pdf::26][Example 3.11 Present Values of an Uneven Series by Decomposition into Single Payments]]
How much do you need to deposit today (P) to withdraw:
- $25 000 at n=1,
- $3000 at n=2,
- at n=4,

if your account earns 10% per period?
  #+begin_src python :noweb no-export :exports both :results value
<<imports>> # 28,622
return single_present(F=25000, i=0.1, N=1) + single_present(F=3000, i=0.1, N=2) + single_present(F=5000, i=0.1, N=4)
  #+end_src

  #+RESULTS:
  : 28621.678847073283

*** [[pdf:./notes/lecture/markup/2021a L4 Interest Formula for Conventional Series (with notes).pdf::4][Example 3.13 Present Values of an Uneven Series by Decomposition into Single Payments]]
Suppose you make an annual contribution of $3000 to your savings account at the end of each year for 10 years.
If the account earns 7% interest annually, how much can be withdrawn at the end of 10 years?
#+begin_src python :noweb no-export :exports both :results value
<<imports>>
return eq_future(A=3000, i=0.07, N=10) # should be $41449.20
#+end_src

  #+RESULTS:
  : 41449.34388383856

*** [[pdf:./notes/lecture/markup/2021a L4 Interest Formula for Conventional Series (with notes).pdf::7][Example 3.16 Present Values of an Uneven Series by Decomposition into Single Payments]]
A. invest $2000 per year for the first 10 years of your career 
   - at the end of 10 years, make no further investments but reinvest the amount accumulated at the end of 10 years for the next 31 years
B. do nothing for the next 10 years
   - start investing $2000 per year for the next 31 years

C. invest $2000 per year for the entire 41 years

All investments are made at the beginning of each year. The first deposit will be made at the beginning of age 25 (n=0) and you want to calculate the balance at the age of 65 (n=41)

(At time 0, work with this as a single payment)

A. TODO: this is wrong, fix it
   #+begin_src python :noweb no-export :exports both :results output
<<imports>>
# investments are made at the beginning of each year, need to time shift
i=0.0938
# I'm not sure if this is right
time_shift = (1+i)**1
a= eq_future(A=2000, i=i, N=10) * time_shift
print(f"a after 10 years: {a}")
a = single_future(P=a, i=i, N=31)
print(f"a after 10 + 31 years: {a}")

b = eq_future(A=2000, i=i, N=31) * time_shift
print(f"b after 31 years: {b}")

c = eq_future(A=2000, i=i, N=41) * time_shift
print(f"c after 41 years: {c}")

print(f"time shift {single_future(P=0, i=i, N=1)}")
   #+end_src

   #+RESULTS:
   : a after 10 years: 33844.88894182197
   : a after 10 + 31 years: 545215.9890985081
   : b after 31 years: 352377.49463949824
   : c after 41 years: 897593.4837380064
   : time shift 0.0
*** Example 3.18 Deferred Loan Repayment
Suppose that BioGen wants to negotiate with the bank to defer the first loan repayment until the end of year 2 (but still desires to make six equal instalments at 8% interest). If the bank wishes to earn the same profit, what should be the annual instalment, also known as deferred annuity?

the equal series fits well, except for the deferred payment. So, apply time shifting
\[P' = \$250000 (F/P, 8\%, 1)]
#+begin_src python :noweb no-export :exports both :results output
<<imports>>
i = 0.08
P_prime = single_future(P=250000, i=i, N=1) # time shift initial
print(P_prime)
A_prime = eq_capital_recovery(P_prime, i=i, N=6)
print(A_prime)
#+end_src

#+RESULTS:
: 270000.0
: 58405.15428183262

*** Example 3.19 Millionaire life example
Let us revisit the Millionaire Life example. Suppose that you had selected the annual payment option. Let’s see how your decision stands up against the $17 million cash prize option. If you could invest your money at 8% interest, what is the present worth of the 25 future payments at $1,000,000 per year for 25 years?

   #+begin_src python :noweb no-export :exports both :results value
<<imports>>
A=1000000
i = 0.08
N=25
return eq_present(A=A, i=i, N=N)
   #+end_src

   #+RESULTS:
   : 10674776.188588582

   Turns out you're better off taking the $17 million up front, since 10 million is way less

*** Example 3.20
The maintenance costs for a truck during the first year will be $1,000 and are expected to increase at a rate of $250 per year. The firm wants to set up a maintenance account that earns 12% annual interest. How much does the firm have to deposit in the account now?

View this as a equal (uniform) series with a linear gradient

#+begin_src python :noweb no-export :exports both :results value
<<imports>>
G = 250
i = 0.12
N = 5
return eq_present(A=1000, i=i, N=N) + linear_present(G=G, i=i, N=N) #5204
#+end_src 

#+RESULTS:
: 5204.030210161696

*** Example 3.21
Find the equal amount for equal payment series to have the same money at the end as the geometric
TODO: insert picture since there isn't much info 
#+begin_src python :noweb no-export :exports both :results value
<<imports>>
A_1 = 1000
G = 300
i = 0.1
N = 6

return A_1 + linear_conversion(G=G, i=i, N=N)
#+end_src

#+RESULTS:
: 1667.0671534719895


*** Example 3.22
#+begin_src python :noweb no-export :exports both :results output
<<imports>>
A_1 = 1200
G = -200
i = 0.1
N = 5

# find F = F1 - F2

F1 = eq_future(A=A_1, i=i, N=N)
print(F1)

F2 = linear_present(G=G, i=i, N=N)
# need to time shift present to future
F2 = single_future(P=F2, i=i, N=N)
print(F2)
print(F1 + F2)
#+end_src

#+RESULTS:
: 7326.120000000006
: -2210.2000000000107
: 5115.9199999999955

*** Example 3.23
Current System
- Because of leaks, the compressor is expected to run 70% of the time that the plant will be in operation during the upcoming year.
- This will require 259.238 kWh of electricity at a rate of $0.05/kWh. (Plant runs 250 days a year, 24 hours per day.)
- With current air delivery system, the compressor run time will increase by 7% per year for the next five years

New System
- Can replace all of the old piping now at a cost of $28,570.
- The compressor will still run the same number of days; however, it will run 23% less hours each day because of the reduced air pressure loss.
- No annual increase in run time.
- The interest rate is 12%.
#+begin_src python :noweb no-export :exports both :results output
<<imports>>
g=0.07
i=0.12
N=5

# find A1, P
# A1 is power cost = % day operating * days operating per year
hours = 250 * 24
cost_per_hour = 0.05 # kWh
power = 259.238
A1 = 0.7 * hours * cost_per_hour * power
print(f" A1: {A1}")

current = geo_present(A1=A1, g=g, i=i, N=N)
print(f"current: {current}")

A1 = (1-0.23) * A1
new = 28570 + geo_present(A1=A1, g=g, i=i, N=N)
print(f"new: {new}")
#+end_src

#+RESULTS:
:  A1: 54439.98
: current: 222283.3177586273
: new: 199728.154674143

So, the replacement should be made now


** Types of cash flows
[[pdf:./notes/lecture/markup/2021a L3 Economic Equivalence Single Cashflow (with notes).pdf::20][5 Types of Cash Flows Diagrams]]
TODO: insert formula sheet
- Single cash flow :: a single present or future cash flow
  - Compound Amount Factor :: (F/A, i, N)
    \( (F/P, i, N) = (i+1)^N\)
    - computes the equivalent future value F, given a present value P
  - Present Worth Factor :: (P/A, i, N)
    \(P/F, i, N = \frac{1}{(1+i)^N}\)
    - calculates the equivalent present value P given a future value
  - the interest rate \(i\) and the \(P/F\) factor are also referred to as the <<<discount rate>>> and <<<discounting factor>>>
- Equal (uniform) series :: (uniform) a series of cash flows of equal amounts at regular intervals
- Linear Gradient Series :: a series of cash flows increasing or decreasing by a fixed amount at regular intervals
- Geometric Gradient Series :: a series of cash flows increasing or decreasing by a fixed percentage at regular intervals
  - aka compounding series
- Irregular (Mixed) Series :: a series of cash flows exhibiting no overall pattern
  + there still might be patterns for portions of the series, but overall there is no pattern
- Sinking Fund Factor :: (A/F, i, N)
  - a sinking fund is an interest bearing account into which a fixed sum is deposited each interest period
  - it is commonly established for the purpose of replacing fixed assets or retiring corporate bonds
- Capital Recovery Factor :: (A/P, i, N)
  - used to determine the revenue requirements needed to address the upfront capital costs for projects
  - A/P factor is referred to as the <<<annuity>>> and indicates a series of payments of a fixed or constant amount for specified number of periods
  - limiting case when N -> infinity ; A=P*i
- Present Worth Factor :: (P/A, i, N)
  - What would you have to invest now in order to withdraw A dollars at the end of each of the next N periods?
- Linear Gradient Series ::
  - Gradient to equal payment series conversion factor (A/G, i, N)
  - *the cash flow in period 1 is zero*
  - the cash flows in periods 2 through N increase a constant amount
  - G is the increment
  - Present Worth Factor :: Linear Gradient (P/G, i, N)
    - limiting case when N -> infinity ; \(P = G/i^2\)
  - Conversion Factor :: (A/G, i, N)
- Geometric Gradient Series ::
  series of cash flows that increase or decrease by a constant percentage each period (ex: price changes by inflation)
  - g is the percentage change
  - Present Worth Factor :: (P/A_1, g, i, N)


* Chapter 4
** Story: Mortgages
Canadians have the choice of using a variable-rate mortgage or a fixed-rate mortgage to finance their homes.The interest rate charged on a variable-rate mortgage is tied to the prime rate, which is adjusted from time to time.A fixed-rate mortgage charges a fixed interest rate over a specified period of time

- nominal interest rate :: a stated rate of interest for a given period (usually a year)
  - a.k.a. APR
  - the yearly cost of a loan expressed as a percentage
  - 18% APR compounded monthly means
    1. each month the bank will charge 1.5% interest on an unpaid balance
    2. you will earn 1.5% interest each month on your remaining balance if you deposited money

- effective interest rate :: the actual rate of interest, which accounts for the interest amount accumulated over a given period
  - effective annual interest rate is the rate that truly represents the interest earned or paid in one year
    + compounding within the year is considered
  - The 18% APR compounded monthly means the bank will charge 1.5% interest on any unpaid balance at the end of each month. Therefore, the 1.5% rate represents the effective interest rate per month. On a yearly basis, you are looking for a cumulative rate —1.5% each month for 12 months.

  - r = nominal interest rate per year
  - M = number of compounding periods per year
  - i_a = effective annual interest rate

    \[i_a = (1 + \frac{r}{M})^M - 1\]

    when \(M \to \infty, i_a = e^r - 1\)
- effective interest rates per payment period ::
  we can generalize the effective annual interest rate formula to compute the effective interest rate for periods of any duration
  + M = number of compounding periods per year
  + C = number of compounding periods per payment period
  + K = number of payment periods per year
  + \(M=CK\)

  \[i = (1 + \frac{r}{m})^C -1 = (1+\frac{r}{M})^{\frac{M}{K}} -1\]

  - continuous compounding ::

\[i_e = e^{\frac{r}{K}} -1\]

r/K is per payment period

- when payment period is equal to compounding period (M=K => C=1)
  1) Identify number of compounding periods (M) per year
  2) compute the effective intereswt rate per payment period (i)
     \(i=r/M\)
  3) determine the total number of payment periods (N)
     \(N=M \times (number of years)\)

- compounding occurs at a different frequency from the payment frequency
  1) compounding is more frequent than payments
  2) compounding is less frequent than payments
     - usually a bad idea because there's no benefit from paying earlier when that money could be making interest for you

       TODO : insert decision flow chart 9-14

- changing interest rates
  When an equivalence calculation extends over several years, more than one interest rate may be applicable to properly account for the time value of money.

  consider variable interest rates in
  a) single payments
  b) single payments and a series of cash flows

- <<<amortized>>> loan :: loans that are paid off in equal instalments over time
  + the amount of interest owed for a specified period is calculated on the basis of the remaining balance on a loan at the beginning of the period
  + A = P(A/P, i, N)
  + B_n :: remaining balance at the end of the period n, B_0 = P
  + I_n :: Interest payment in period n, where I_n = B_{n-1} i
  + PP_n :: Principal payment in period n

    \[A = PP_n + I_n\]
    
  + compounded monthly most of the time
  + ex: auto loan, mortgage
- payment split :: an addition al aspect of amortized loans is calculating the amount of interest vs the portion of the principal that is paid off in each instalment
  1. conventional amortized loan, based on the compound interest method
  2. add on loan, based on simple interest concept
** Examples
*** Savings Account With Interest Rate of 9% Compounded Quarterly
You deposit $10,000 in a savings account with an APR of 9% compounded quarterly. The interest rate per quarter is 2.25% (9%/4).

*** Example: Find i_a given different M values

Given an APR value of 15% compounded annually, semi-annually, monthly, daily, or continuously, find the annual effective interest rate in each case.

1. annually: i_a = APR = 15%
2. semi annually m = 2 i_a = (1+15%/2)^2 - 1 = 15.563%
3. monthly m=12 i_a = (1 + 15%/2)^12 = 16.0755%
4. m = 365
5. continuously i_a = \(e^r - 1\)

#+begin_src python :noweb no-export :results output
<<imports>>
for M in [1, 2, 12, 365, math.inf]:
    ia = effective_rate_per_interest_period(M=M, r=0.15)
    M = str(M).ljust(3)
    print(f"M={M} i_a: {ia*100}%")
#+end_src

#+RESULTS:
: M=1   i_a: 14.999999999999991%
: M=2   i_a: 15.56249999999999%
: M=12  i_a: 16.075451772299807%
: M=365 i_a: 16.179844312827374%
: M=inf i_a: 16.183424272828304%
   


Takeaway: the more often you compound, the higher the interest rate (diminishing returns, and there is a limit)


*** Example 4.1 Determining the Compounding Frequency

- r = 3.5%
- i_a (APY) = 3.53%
- P = $100 000
- N = 2 years

  compounding frequency assumed is

  \(0.0353 = (1 + \frac{0.0350}{M})^M -1\)
  \(M=2\)

  total balance 2 years later:
  \(F = 100000(F/P, 3.53%, 2) - 107.185\)

a) M is 2 by trial and error

*** Example 4.2 Effective rate per payment period
Suppose that you make quarterly deposits in a savings account that earns 9% interest compounded monthly. Compute the effective interest rate per quarter

  \[i = (1 + \frac{r}{M})^C -1\]

  TODO make python function
#+begin_src python :noweb no-export
<<imports>>
r = 0.09
K = 4
M = 12
#return (1 + 0.09/12)**3 - 1
return effective_rate_per_interest_period(r=r, M=M, K=K)
#+end_src

#+RESULTS:
: 0.022669171875000282


*** Example 4.3
a) quarterly: M=1
b) monthly: M=12

*** Extra Example 1
Suppose you make equal quarterly deposits of $1500 each into a fund that pays interest at a rate of 6% compounded monthly. Find balance at the end of year 2.

#+begin_src python :noweb no-export
<<imports>>
r = 0.06
M=12
K=4
i = effective_rate_per_interest_period(r, M, K)

future_value = lambda x: print("todo")
return i
#+end_src

#+RESULTS:
: 0.015075124999999634

*** Extra Example 2
A loan company offers money at 1.8% per month, compounded monthly.
a) What is the nominal interest rate?
b) What is the effective annual interest rate?
c) How many years will it take for a borrowed amount to tripleif no payments are made?

#+begin_src python :noweb no-export :results output
<<imports>>
r = 0.018
M=12
K=12

APR = r * 12

print(f"nominal interest rate: {APR}") # should be 21.6%


i_a = effective_rate_per_interest_period(APR, M, K)
print(f"effective annual interest rate: {i_a}") # should be 23.87%

# p(1 + i_a)^N = 3P => solve for N (should be 6)

#+end_src

#+RESULTS:
: nominal interest rate: 0.21599999999999997
: effective annual interest rate: 0.018000000000000016

*** Extra Example 3
If the interest rate is 8.5% compounded continuously, what is the required quarterly payment to repay a loan of $12,000 in five years?

#+begin_src python :noweb no-export :results output
<<imports>>
r = 0.085
M=12
K=4

# quarterly
#i_e = e^(8.5%/4) -1 = 2.148%
# A = P(A/P, 2.148%, 20)
# = 744

#+end_src

#+RESULTS:

*** Example 4.4 Auto loan payments
- sale price: 21355
- down payment: 6355
- interest rate: 6.25 annual APR compunded monthly
- pay monthly
- 72 months length of financing

  i_e = 6.25%/12

  A = P(A/P, 0.05208, 72) = 15000*0.0167 = 250.37

*** Example 4.5

*** Example 4.6 Compounding more frequently than payment
A series of equal quarterly receipts of $500 extends over a period of five years. What is the present worth of this quarterly payment series at 8% interest compounded continuously?
#+begin_src python :noweb no-export :results output
<<imports>>
r = 0.085
M=12
K=4

# quarterly
#i_e = e^(8%/4) -1 = 2.028%

#+end_src

*** Example 4.7 Compounding less frequent than payments

*** Example 4.10 Changing Interest Rates with a lump sum amount


*** Example 4.11 Changing Interest Rates with uneven Cash flow
convert all 3 payments to present


*** Extra Example Changing interest rate
Over the past three years, you have been making monthly deposits of $1000 each. The interest rates you have earned from this account have been 6% in year 1, 5% in year 2, and 4% in year 3 (all based on monthly compounding). What is the balance today?
# should be 38496.53
#+begin_src python :results output
A=1000

# monthly deposits

calculate for 3 periods, each with their own interest rate
then convert to present value

#+end_src

#+RESULTS:
: hello

*** Example 4.12 Loan Balance Principal and Interest
Suppose you secure a home improvement loan in the amount of $5,000 from a local bank. The loan officer computes your monthly payment as follows:Contract amount = $5,000 , contract period = 24 months, annual percentage rate = 12%, and monthly installments = $235.37
